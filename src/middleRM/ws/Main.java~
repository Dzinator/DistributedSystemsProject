package middleRM.ws;


import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.jws.WebService;
import java.util.Random;
import java.util.concurrent.locks.ReentrantLock;



import javax.naming.NamingException;

import org.apache.catalina.startup.Tomcat;

@WebService
public class Main implements server.ws.ResourceManager {
	
	//the 3 RM connections to the middle ressource manager
	private static HashMap<String, Connection> services = new HashMap<String, Connection>(3);

	//customer support
	private static HashMap<Integer, Customer> customers = new HashMap<Integer, Customer>();
	
	private static final ReentrantLock itineraryLock = new ReentrantLock();

		
	//read
	private static Customer getCustomer(int key) 
	{
		synchronized(customers)
		{
			return customers.get(key);
		}
	}

	//write
	private static void putCustomer(int key, Customer c)
	{
		synchronized(customers)
		{
			customers.put(key, c);
		}
	}


	//delete
	private static void deleteCustomer(int key)
	{
		synchronized(customers)
		{
			customers.remove(key);
		}
	}


	
	public Main() throws NamingException, MalformedURLException
	{
		//Context env = (Context) new InitialContext().lookup("java:comp/env");
	
		//get flight info and place in services
		String flightServiceHost = "localhost";//(String) env.lookup("flight-service-host");
		Integer flightServicePort = 1410;//(Integer) env.lookup("flight-service-port");
		String flightServiceName = "flight";//(String) env.lookup("flight-service-name");
		Connection flightServer = new Connection(flightServiceName, flightServiceHost, flightServicePort );
		services.put("flight server", flightServer);
		
		//get car info and place in services
		String carServiceHost = "localhost";//(String) env.lookup("flight-service-host");
		Integer carServicePort = 1411;//(Integer) env.lookup("flight-service-port");
		String carServiceName = "car";//(String) env.lookup("flight-service-name");
		Connection carServer = new Connection(carServiceName, carServiceHost, carServicePort );
		services.put("car server", carServer);
		
		//get hotel info and place in services
		String hotelServiceHost = "localhost";//(String) env.lookup("flight-service-host");
		Integer hotelServicePort = 1412;//(Integer) env.lookup("flight-service-port");
		String hotelServiceName = "room";//(String) env.lookup("flight-service-name");
		Connection hotelServer = new Connection(hotelServiceName, hotelServiceHost, hotelServicePort );
		services.put("hotel server", hotelServer);
	}
	
	public static void main(String[] args) throws Exception 
	{  
        if (args.length != 3) {
           System.out.println(
                "Usage: java Main <service-name> <service-port> <deploy-dir> but for middleRM, so 12 inputs");
            System.exit(-1);
        }
        //services = new HashMap<String, Connection>(3);
        for(String s : args)
        {
        	System.out.println(s);
        }
       
        
        //setup Tomcat
        String serviceName = args[0];
        int port = Integer.parseInt(args[1]);
        String deployDir = args[2];
        
        Tomcat tomcat = new Tomcat();
        tomcat.setPort(port);
        tomcat.setBaseDir(deployDir);

        tomcat.getHost().setAppBase(deployDir);
        tomcat.getHost().setDeployOnStartup(true);
        tomcat.getHost().setAutoDeploy(true);

        //tomcat.addWebapp("", new File(deployDir).getAbsolutePath());

        
       // System.out.println("inputs: /" + serviceName + " ,file path : " + new File(deployDir + "/" + serviceName).getAbsolutePath());
        tomcat.addWebapp("/" + serviceName, 
                new File(deployDir + "/" + serviceName).getAbsolutePath());
      
        tomcat.enableNaming();
        tomcat.start();
        tomcat.getServer().await();
	}

	@Override
	public boolean addFlight(int id, int flightNumber, int numSeats, int flightPrice) {
		return services.get("flight server").proxy.addFlight(id, flightNumber, numSeats, flightPrice); 
	}

	@Override
	public boolean deleteFlight(int id, int flightNumber) {
		return services.get("flight server").proxy.deleteFlight(id, flightNumber);
	}

	@Override
	public int queryFlight(int id, int flightNumber) {
		return services.get("flight server").proxy.queryFlight(id, flightNumber);
	}

	@Override
	public int queryFlightPrice(int id, int flightNumber) {
		return services.get("flight server").proxy.queryFlightPrice(id, flightNumber);
	}

	@Override
	public boolean addCars(int id, String location, int numCars, int carPrice) {
		return services.get("car server").proxy.addCars(id, location, numCars, carPrice);
	}

	@Override
	public boolean deleteCars(int id, String location) {
		return services.get("car server").proxy.deleteCars(id, location);
	}

	@Override
	public int queryCars(int id, String location) {
		return services.get("car server").proxy.queryCars(id, location);
	}

	@Override
	public int queryCarsPrice(int id, String location) {
		return services.get("car server").proxy.queryCarsPrice(id, location);
	}

	@Override
	public boolean addRooms(int id, String location, int numRooms, int roomPrice) {
		return services.get("hotel server").proxy.addRooms(id, location, numRooms, roomPrice);
	}

	@Override
	public boolean deleteRooms(int id, String location) {
		return services.get("hotel server").proxy.deleteRooms(id, location);
	}

	@Override
	public int queryRooms(int id, String location) {
		return services.get("hotel server").proxy.queryRooms(id, location);
	}

	@Override
	public int queryRoomsPrice(int id, String location) {
		return services.get("hotel server").proxy.queryRoomsPrice(id, location);
	}

	@Override
	public int newCustomer(int id) {
		
		while(true)
		{
			int randomId = Math.abs(new Random().nextInt());
			
			if ( getCustomer(randomId) == null)
			{
				addCustomerToServices(id, randomId);
				return randomId;
			}		
		}
	}

	@Override
	public boolean newCustomerId(int id, int customerId) {
		if(getCustomer(customerId) != null)
			return false;
		return addCustomerToServices(id, customerId);		
	}

	@Override
	public boolean deleteCustomer(int id, int customerId) {
		if ( itineraryLock.isLocked())
			try{wait();}catch(Exception e){}
		if(getCustomer(customerId) == null)
			return false;	
		return removeCustomerFromServices(id, customerId);
	}

	@Override
	public String queryCustomerInfo(int id, int customerId) {
		
		if (getCustomer(customerId) == null)
			return "";
		return "Composite Bill for customer " + customerId + " {\n\t\t" +
			   services.get("car server").proxy.queryCustomerInfo(id, customerId) + "\n\n\t\t" +
			   services.get("hotel server").proxy.queryCustomerInfo(id, customerId) + "\n\n\t\t" +
		       services.get("flight server").proxy.queryCustomerInfo(id, customerId) + "\n" +
			   "}\n";
	}

	@Override
	public boolean reserveFlight(int id, int customerId, int flightNumber) {
		
		if ( itineraryLock.isLocked())
			try{wait();}catch(Exception e){}
		if (getCustomer(customerId) == null)
			return false;
		
		 return services.get("flight server").proxy.reserveFlight(id, customerId, flightNumber);
	}

	@Override
	public boolean reserveCar(int id, int customerId, String location) {
		if ( itineraryLock.isLocked())
			try{wait();}catch(Exception e){}
		if (getCustomer(customerId) == null)
			return false;
		return services.get("car server").proxy.reserveCar(id, customerId, location);
	}

	@Override
	public boolean reserveRoom(int id, int customerId, String location) {
		if ( itineraryLock.isLocked())
			try{wait();}catch(Exception e){}
		if (getCustomer(customerId) == null)
			return false;
		return services.get("hotel server").proxy.reserveRoom(id, customerId, location);
	}

	@Override
	public synchronized boolean reserveItinerary(int id, int customerId, Vector flightNumbers, String location, boolean car, boolean room) 
	{
	
		
		if (getCustomer(customerId) == null)
			return false;

		itineraryLock.lock();
		
		//check for available slots
    	for(Object flightNum : flightNumbers)
    	{
    		try
    		{
    			int flightNumber =  Integer.parseInt(flightNum.toString());
    			if (services.get("flight server").proxy.queryFlight( id, flightNumber) == 0)
    			{
				itineraryLock.unlock();
				notifyAll();
				return false;
			}
    		}
    		catch(Exception e)
    		{
    			
			itineraryLock.unlock();
			notifyAll();
			return false;
    		}
    	}
    	
    	if (car && services.get("car server").proxy.queryCars(id, location) == 0)
    	{
		itineraryLock.unlock();
		notifyAll();
		return false;
	}
    	if (room && services.get("hotel server").proxy.queryRooms(id, location) == 0)
    	{
		itineraryLock.unlock();
		notifyAll();
		return false;
	}
    	
    	
    	//reserve seats
    	for(Object flightNum : flightNumbers)
    	{
    		try
    		{
    			int flightNumber =  Integer.parseInt(flightNum.toString());
    			if (!services.get("flight server").proxy.reserveFlight(id, customerId, flightNumber))
    			{
				itineraryLock.unlock();
				notifyAll();
				return false;
			}
    		}
    		catch(Exception e)
    		{
			itineraryLock.unlock();
			notifyAll();
			return false;
		}
    	}
    	
    	if (car && !services.get("car server").proxy.reserveCar(id, customerId, location))
	{
		itineraryLock.unlock();
		notifyAll();
		return false;
	}
    		
    	if (room && !services.get("hotel server").proxy.reserveRoom(id, customerId, location))
    	{
		itineraryLock.unlock();
		notifyAll();
		return false;
	}

	itineraryLock.unlock();
	notifyAll();
		return true;
	}
	
	private synchronized boolean addCustomerToServices(int id, int customerId)
	{
		putCustomer(customerId, new Customer(customerId));
		int count = 0;
		for( Entry<String, Connection> connection : services.entrySet())
		{
			if(connection.getValue().proxy.newCustomerId(id, customerId))
				count++;
		}
		return count==services.size();
	}

	private synchronized boolean removeCustomerFromServices(int id, int customerId)
	{
		deleteCustomer(customerId);
		int count = 0;
		for( Entry<String, Connection> connection : services.entrySet())
		{
			if (connection.getValue().proxy.deleteCustomer(id, customerId))
				count++;
		}
		return count==services.size();
	}
}

class Connection
{
	 ResourceManagerImplService service;
	 ResourceManager proxy; //server.ws.ResourceManager
	 
	 public Connection(String serviceName, String serviceHost, int servicePort) 
	 throws MalformedURLException {
	 
	     URL wsdlLocation = new URL("http", serviceHost, servicePort, 
	             "/" + serviceName + "/service?wsdl");
	     
	     
	     service = new ResourceManagerImplService(wsdlLocation);
	     
	     proxy = service.getResourceManagerImplPort();
	 }
}

class Customer
{
	int id;	
	public Customer(int pid)
	{
		id = pid;
	}
}
